/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SourceDto } from './SourceDto';
import {
    SourceDtoFromJSON,
    SourceDtoFromJSONTyped,
    SourceDtoToJSON,
} from './SourceDto';
import type { ResultDocument } from './ResultDocument';
import {
    ResultDocumentFromJSON,
    ResultDocumentFromJSONTyped,
    ResultDocumentToJSON,
} from './ResultDocument';

/**
 * 
 * @export
 * @interface FileResult
 */
export interface FileResult {
    /**
     * The Chunks which were found for the given query
     * @type {Array<ResultDocument>}
     * @memberof FileResult
     */
    files: Array<ResultDocument>;
    /**
     * Through this filed you can return Markdown which will be rendered in the frontend. You can  return sources through that
     * @type {string}
     * @memberof FileResult
     */
    debug: string;
    /**
     * Additional information about the sources.
     * @type {Array<SourceDto>}
     * @memberof FileResult
     */
    sources: Array<SourceDto>;
}

/**
 * Check if a given object implements the FileResult interface.
 */
export function instanceOfFileResult(value: object): value is FileResult {
    if (!('files' in value) || value['files'] === undefined) return false;
    if (!('debug' in value) || value['debug'] === undefined) return false;
    if (!('sources' in value) || value['sources'] === undefined) return false;
    return true;
}

export function FileResultFromJSON(json: any): FileResult {
    return FileResultFromJSONTyped(json, false);
}

export function FileResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileResult {
    if (json == null) {
        return json;
    }
    return {
        
        'files': ((json['files'] as Array<any>).map(ResultDocumentFromJSON)),
        'debug': json['debug'],
        'sources': ((json['sources'] as Array<any>).map(SourceDtoFromJSON)),
    };
}

export function FileResultToJSON(value?: FileResult | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'files': ((value['files'] as Array<any>).map(ResultDocumentToJSON)),
        'debug': value['debug'],
        'sources': ((value['sources'] as Array<any>).map(SourceDtoToJSON)),
    };
}

