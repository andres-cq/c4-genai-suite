/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExecuteRequestDto,
  ExecuteResponseDto,
  ToolsDto,
} from '../models/index';
import {
    ExecuteRequestDtoFromJSON,
    ExecuteRequestDtoToJSON,
    ExecuteResponseDtoFromJSON,
    ExecuteResponseDtoToJSON,
    ToolsDtoFromJSON,
    ToolsDtoToJSON,
} from '../models/index';

export interface ExecuteToolRequest {
    executeRequestDto: ExecuteRequestDto;
}

/**
 * 
 */
export class ToolsApi extends runtime.BaseAPI {

    /**
     * Execute a tool.
     * 
     */
    async executeToolRaw(requestParameters: ExecuteToolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExecuteResponseDto>> {
        if (requestParameters['executeRequestDto'] == null) {
            throw new runtime.RequiredError(
                'executeRequestDto',
                'Required parameter "executeRequestDto" was null or undefined when calling executeTool().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tools`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExecuteRequestDtoToJSON(requestParameters['executeRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExecuteResponseDtoFromJSON(jsonValue));
    }

    /**
     * Execute a tool.
     * 
     */
    async executeTool(executeRequestDto: ExecuteRequestDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExecuteResponseDto> {
        const response = await this.executeToolRaw({ executeRequestDto: executeRequestDto }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the available tools.
     * 
     */
    async getToolsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tools`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolsDtoFromJSON(jsonValue));
    }

    /**
     * Gets the available tools.
     * 
     */
    async getTools(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolsDto> {
        const response = await this.getToolsRaw(initOverrides);
        return await response.value();
    }

}
