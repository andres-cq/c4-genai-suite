/* tslint:disable */
/* eslint-disable */
/**
 * CCCC
 * CodeCentric Company Chat
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ToolArgumentDto
 */
export interface ToolArgumentDto {
    /**
     * The type of the argument.
     * @type {string}
     * @memberof ToolArgumentDto
     */
    type: ToolArgumentDtoTypeEnum;
    /**
     * True, if required.
     * @type {boolean}
     * @memberof ToolArgumentDto
     */
    required?: boolean;
    /**
     * The description of the argument.
     * @type {string}
     * @memberof ToolArgumentDto
     */
    description?: string;
    /**
     * The enum values.
     * @type {Array<string>}
     * @memberof ToolArgumentDto
     */
    allowedValues?: Array<string>;
}


/**
 * @export
 */
export const ToolArgumentDtoTypeEnum = {
    Boolean: 'boolean',
    Number: 'number',
    String: 'string'
} as const;
export type ToolArgumentDtoTypeEnum = typeof ToolArgumentDtoTypeEnum[keyof typeof ToolArgumentDtoTypeEnum];


/**
 * Check if a given object implements the ToolArgumentDto interface.
 */
export function instanceOfToolArgumentDto(value: object): value is ToolArgumentDto {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function ToolArgumentDtoFromJSON(json: any): ToolArgumentDto {
    return ToolArgumentDtoFromJSONTyped(json, false);
}

export function ToolArgumentDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolArgumentDto {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'required': json['required'] == null ? undefined : json['required'],
        'description': json['description'] == null ? undefined : json['description'],
        'allowedValues': json['allowedValues'] == null ? undefined : json['allowedValues'],
    };
}

export function ToolArgumentDtoToJSON(value?: ToolArgumentDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'type': value['type'],
        'required': value['required'],
        'description': value['description'],
        'allowedValues': value['allowedValues'],
    };
}

