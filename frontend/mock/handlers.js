/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { HttpResponse, http } from 'msw';
import { faker } from '@faker-js/faker';

faker.seed(1);

const baseURL = `${process.env.VITE_SERVER_URL || ''}/api`;
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  http.get(`${baseURL}/auth/settings`, async () => {
    const resultArray = [[await getGetAuthSettings200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/auth/profile`, async () => {
    const resultArray = [[await getGetProfile200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/auth/login`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/conversations`, async () => {
    const resultArray = [[await getGetConversations200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/conversations`, async () => {
    const resultArray = [[await getPostConversation200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/conversations/:id`, async () => {
    const resultArray = [[await getGetConversation200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/conversations/:id`, async () => {
    const resultArray = [[await getPutConversation200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/conversations/:id`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/conversations/:id/messages`, async () => {
    const resultArray = [[await getGetMessages200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/conversations/:id/messages/sse`, async () => {
    const resultArray = [[undefined, { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/conversations/:id/messages/:messageId`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/conversations/confirm/:id`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/deployments`, async () => {
    const resultArray = [[await getGetDeployments200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/deployments`, async () => {
    const resultArray = [[await getPostDeployment200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/deployments/:id`, async () => {
    const resultArray = [[await getPutDeployment200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/deployments/:id`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/deployments/:id/extensions`, async () => {
    const resultArray = [[await getGetExtensions200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/deployments/:id/extensions`, async () => {
    const resultArray = [[await getPostExtension200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/deployments/:id/extensions/:extensionId`, async () => {
    const resultArray = [[await getPutExtension200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/deployments/:id/extensions/:extensionId`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/extensions/test`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/buckets/test`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/buckets`, async () => {
    const resultArray = [[await getGetBuckets200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/buckets`, async () => {
    const resultArray = [[await getPostBucket200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/buckets/:id`, async () => {
    const resultArray = [[await getPutBucket200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/buckets/:id`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/buckets/:id/files`, async () => {
    const resultArray = [[await getGetFiles200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/buckets/:id/files`, async () => {
    const resultArray = [[await getPostFile200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/buckets/:id/files/:fileId`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/settings`, async () => {
    const resultArray = [[await getGetSettings200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/settings`, async () => {
    const resultArray = [[await getPostSettings200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/settings/logo`, async () => {
    const resultArray = [[undefined, { status: 201 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/settings/logo`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/usages/tokens`, async () => {
    const resultArray = [[await getGetTokenUsage200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/usages/ratings`, async () => {
    const resultArray = [[await getGetRatings200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user-files`, async () => {
    const resultArray = [[await getGetUserFiles200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/user-files`, async () => {
    const resultArray = [[await getPostUserFile200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/user-files/:fileId`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/user-groups`, async () => {
    const resultArray = [[await getGetUserGroups200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/user-groups`, async ({ request }) => {
    const body = await request.json();
    const resultArray = [[await getPostUserGroup200Response(body), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/user-groups/:id`, async ({ request }) => {
    const body = await request.json();
    const resultArray = [[await getPutUserGroup200Response(body), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/user-groups/:id`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users`, async () => {
    const resultArray = [[await getGetUsers200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/users`, async () => {
    const resultArray = [[await getPostUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/users/:id`, async () => {
    const resultArray = [[await getGetUser200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/users/:id`, async ({ request }) => {
    const body = await request.json();
    const resultArray = [[await getPutUser200Response(body), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/users/:id`, async () => {
    const resultArray = [[undefined, { status: 204 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
];

export function getGetAuthSettings200Response() {
  return {
    providers: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      name: faker.person.fullName(),
      displayName: faker.person.fullName(),
      color: faker.lorem.words(),
    })),
    enablePasswordAuth: faker.datatype.boolean(),
  };
}

export function getGetProfile200Response() {
  return {
    id: faker.lorem.words(),
    name: faker.person.fullName(),
    email: faker.internet.email(),
    picture: faker.lorem.words(),
    isAdmin: faker.datatype.boolean(),
    hideFileUpload: faker.datatype.boolean(),
  };
}

export function getGetConversations200Response() {
  return {
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      id: faker.number.int(),
      name: faker.person.fullName(),
      deploymentId: faker.number.int(),
      rating: faker.helpers.arrayElement(['good', 'bad', 'unrated']),
      createdAt: faker.date.past(),
    })),
  };
}

export function getPostConversation200Response() {
  return {
    id: faker.number.int(),
    name: faker.person.fullName(),
    deploymentId: faker.number.int(),
    rating: faker.helpers.arrayElement(['good', 'bad', 'unrated']),
    createdAt: faker.date.past(),
  };
}

export function getGetConversation200Response() {
  return {
    id: faker.number.int(),
    name: faker.person.fullName(),
    deploymentId: faker.number.int(),
    rating: faker.helpers.arrayElement(['good', 'bad', 'unrated']),
    createdAt: faker.date.past(),
  };
}

export function getPutConversation200Response() {
  return {
    id: faker.number.int(),
    name: faker.person.fullName(),
    deploymentId: faker.number.int(),
    rating: faker.helpers.arrayElement(['good', 'bad', 'unrated']),
    createdAt: faker.date.past(),
  };
}

export function getGetMessages200Response() {
  return {
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      id: faker.number.int(),
      content: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) =>
        faker.helpers.arrayElement([
          {
            text: faker.lorem.words(),
            type: faker.helpers.arrayElement(['text']),
          },
          {
            image: {
              url: faker.internet.url(),
            },
            type: faker.helpers.arrayElement(['image_url']),
          },
        ]),
      ),
      type: faker.helpers.arrayElement(['ai', 'human']),
      rating: faker.helpers.arrayElement([
        'lazy',
        'insufficient_style',
        'incorrect',
        'instructions_not_followed',
        'refused',
        'other',
      ]),
      tools: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => faker.lorem.words()),
      debug: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => faker.lorem.words()),
    })),
  };
}

export function getGetDeployments200Response() {
  return {
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      id: faker.number.int(),
      name: faker.person.fullName(),
      enabled: faker.datatype.boolean(),
      agentName: faker.person.fullName(),
      chatFooter: faker.lorem.words(),
      chatSuggestions: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
        title: faker.lorem.words(),
        subtitle: faker.lorem.words(),
        text: faker.lorem.words(),
      })),
      executorEndpoint: faker.lorem.words(),
      executorHeaders: faker.lorem.words(),
      userGroupsIds: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => faker.lorem.words()),
    })),
  };
}

export function getPostDeployment200Response() {
  return {
    id: faker.number.int(),
    name: faker.person.fullName(),
    enabled: faker.datatype.boolean(),
    agentName: faker.person.fullName(),
    chatFooter: faker.lorem.words(),
    chatSuggestions: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      title: faker.lorem.words(),
      subtitle: faker.lorem.words(),
      text: faker.lorem.words(),
    })),
    executorEndpoint: faker.lorem.words(),
    executorHeaders: faker.lorem.words(),
    userGroupsIds: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => faker.lorem.words()),
  };
}

export function getPutDeployment200Response() {
  return {
    id: faker.number.int(),
    name: faker.person.fullName(),
    enabled: faker.datatype.boolean(),
    agentName: faker.person.fullName(),
    chatFooter: faker.lorem.words(),
    chatSuggestions: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      title: faker.lorem.words(),
      subtitle: faker.lorem.words(),
      text: faker.lorem.words(),
    })),
    executorEndpoint: faker.lorem.words(),
    executorHeaders: faker.lorem.words(),
    userGroupsIds: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => faker.lorem.words()),
  };
}

export function getGetExtensions200Response() {
  return {
    configured: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      id: faker.number.int(),
      name: faker.person.fullName(),
      values: {},
      enabled: faker.datatype.boolean(),
    })),
    specs: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      name: faker.person.fullName(),
      title: faker.lorem.words(),
      description: faker.lorem.words(),
      logo: faker.lorem.words(),
      testable: faker.datatype.boolean(),
      type: faker.helpers.arrayElement(['tool', 'llm', 'other']),
      arguments: [...new Array(5).keys()]
        .map((_) => ({
          [faker.lorem.word()]: {
            type: faker.helpers.arrayElement(['string', 'number', 'boolean']),
            label: faker.lorem.words(),
            description: faker.lorem.words(),
            required: faker.datatype.boolean(),
            editor: faker.helpers.arrayElement([
              'input',
              'textarea',
              'password',
              'select',
              'input',
              'slider',
              'bucket',
              'toggle',
            ]),
            allowedValues: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) =>
              faker.lorem.words(),
            ),
            min: faker.number.int(),
            max: faker.number.int(),
            showInList: faker.datatype.boolean(),
            userValue: faker.datatype.boolean(),
            documentationUrl: faker.internet.url(),
          },
        }))
        .reduce((acc, next) => Object.assign(acc, next), {}),
    })),
  };
}

export function getPostExtension200Response() {
  return {
    id: faker.number.int(),
    name: faker.person.fullName(),
    values: {},
    enabled: faker.datatype.boolean(),
  };
}

export function getPutExtension200Response() {
  return {
    id: faker.number.int(),
    name: faker.person.fullName(),
    values: {},
    enabled: faker.datatype.boolean(),
  };
}

export function getGetBuckets200Response() {
  return {
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      id: faker.number.int(),
      name: faker.person.fullName(),
      endpoint: faker.lorem.words(),
      headers: faker.lorem.words(),
      isDefault: faker.datatype.boolean(),
    })),
  };
}

export function getPostBucket200Response() {
  return {
    id: faker.number.int(),
    name: faker.person.fullName(),
    endpoint: faker.lorem.words(),
    headers: faker.lorem.words(),
    isDefault: faker.datatype.boolean(),
  };
}

export function getPutBucket200Response() {
  return {
    id: faker.number.int(),
    name: faker.person.fullName(),
    endpoint: faker.lorem.words(),
    headers: faker.lorem.words(),
    isDefault: faker.datatype.boolean(),
  };
}

export function getGetFiles200Response() {
  return {
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      id: faker.number.int(),
      fileName: faker.person.fullName(),
      fileSize: faker.number.int(),
      mimeType: faker.lorem.words(),
      uploadedAt: faker.date.past(),
    })),
    total: faker.number.int(),
  };
}

export function getPostFile200Response() {
  return {
    id: faker.number.int(),
    fileName: faker.person.fullName(),
    fileSize: faker.number.int(),
    mimeType: faker.lorem.words(),
    uploadedAt: faker.date.past(),
  };
}

export function getGetSettings200Response() {
  return {
    name: faker.person.fullName(),
    primaryColor: faker.lorem.words(),
    primaryContentColor: faker.lorem.words(),
    welcomeText: faker.lorem.words(),
    agentName: faker.person.fullName(),
    chatFooter: faker.lorem.words(),
    chatSuggestions: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      title: faker.lorem.words(),
      subtitle: faker.lorem.words(),
      text: faker.lorem.words(),
    })),
    customCss: faker.lorem.words(),
  };
}

export function getPostSettings200Response() {
  return {
    name: faker.person.fullName(),
    primaryColor: faker.lorem.words(),
    primaryContentColor: faker.lorem.words(),
    welcomeText: faker.lorem.words(),
    agentName: faker.person.fullName(),
    chatFooter: faker.lorem.words(),
    chatSuggestions: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      title: faker.lorem.words(),
      subtitle: faker.lorem.words(),
      text: faker.lorem.words(),
    })),
    customCss: faker.lorem.words(),
  };
}

export function getGetTokenUsage200Response() {
  return {
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      date: faker.date.past(),
      total: faker.number.int(),
      byModel: [...new Array(5).keys()]
        .map((_) => ({ [faker.lorem.word()]: faker.number.int() }))
        .reduce((acc, next) => Object.assign(acc, next), {}),
      byUser: [...new Array(5).keys()]
        .map((_) => ({ [faker.lorem.word()]: faker.number.int() }))
        .reduce((acc, next) => Object.assign(acc, next), {}),
    })),
  };
}

export function getGetRatings200Response() {
  return {
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      date: faker.date.past(),
      total: faker.number.int(),
      byCategory: [...new Array(5).keys()]
        .map((_) => ({ [faker.lorem.word()]: faker.number.int() }))
        .reduce((acc, next) => Object.assign(acc, next), {}),
      byUser: [...new Array(5).keys()]
        .map((_) => ({ [faker.lorem.word()]: faker.number.int() }))
        .reduce((acc, next) => Object.assign(acc, next), {}),
    })),
  };
}

export function getGetUserFiles200Response() {
  return {
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      id: faker.number.int(),
      fileName: faker.person.fullName(),
      fileSize: faker.number.int(),
      mimeType: faker.lorem.words(),
      uploadedAt: faker.date.past(),
    })),
    total: faker.number.int(),
  };
}

export function getPostUserFile200Response() {
  return {
    id: faker.number.int(),
    fileName: faker.person.fullName(),
    fileSize: faker.number.int(),
    mimeType: faker.lorem.words(),
    uploadedAt: faker.date.past(),
  };
}

export function getGetUserGroups200Response() {
  return {
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      id: faker.lorem.words(),
      name: faker.person.fullName(),
      isAdmin: faker.datatype.boolean(),
      isBuiltIn: faker.datatype.boolean(),
      monthlyTokens: faker.number.int(),
      monthlyUserTokens: faker.number.int(),
      hideFileUpload: faker.datatype.boolean(),
    })),
  };
}

export function getPostUserGroup200Response(request) {
  return {
    id: faker.lorem.words(),
    name: faker.person.fullName(),
    isAdmin: faker.datatype.boolean(),
    isBuiltIn: faker.datatype.boolean(),
    monthlyTokens: faker.number.int(),
    monthlyUserTokens: faker.number.int(),
    hideFileUpload: faker.datatype.boolean(),
    ...request,
  };
}

export function getPutUserGroup200Response(bodyrequest) {
  return {
    id: faker.lorem.words(),
    name: faker.person.fullName(),
    isAdmin: faker.datatype.boolean(),
    isBuiltIn: faker.datatype.boolean(),
    monthlyTokens: faker.number.int(),
    monthlyUserTokens: faker.number.int(),
    hideFileUpload: faker.datatype.boolean(),
    ...bodyrequest,
  };
}

export function getGetUsers200Response() {
  return {
    items: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
      id: faker.lorem.words(),
      name: faker.person.fullName(),
      email: faker.internet.email(),
      picture: faker.lorem.words(),
      apiKey: faker.lorem.words(),
      roles: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => faker.lorem.words()),
      userGroupId: faker.lorem.words(),
      hasPassword: faker.datatype.boolean(),
    })),
    total: faker.number.int(),
  };
}

export function getPostUser200Response() {
  return {
    id: faker.lorem.words(),
    name: faker.person.fullName(),
    email: faker.internet.email(),
    picture: faker.lorem.words(),
    apiKey: faker.lorem.words(),
    roles: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => faker.lorem.words()),
    userGroupId: faker.lorem.words(),
    hasPassword: faker.datatype.boolean(),
  };
}

export function getGetUser200Response() {
  return {
    id: faker.lorem.words(),
    name: faker.person.fullName(),
    email: faker.internet.email(),
    picture: faker.lorem.words(),
    apiKey: faker.lorem.words(),
    roles: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => faker.lorem.words()),
    userGroupId: faker.lorem.words(),
    hasPassword: faker.datatype.boolean(),
  };
}

export function getPutUser200Response(bodyRequest) {
  return {
    id: faker.lorem.words(),
    name: faker.person.fullName(),
    email: faker.internet.email(),
    picture: faker.lorem.words(),
    apiKey: faker.lorem.words(),
    roles: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => faker.lorem.words()),
    userGroupId: faker.lorem.words(),
    hasPassword: faker.datatype.boolean(),
    ...bodyRequest,
  };
}
