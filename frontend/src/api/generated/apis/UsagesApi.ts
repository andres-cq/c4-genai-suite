//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MessagesCountsDto,
  RatingsDto,
  UsagesDto,
  UsersCountsDto,
} from '../models/index';
import {
    MessagesCountsDtoFromJSON,
    MessagesCountsDtoToJSON,
    RatingsDtoFromJSON,
    RatingsDtoToJSON,
    UsagesDtoFromJSON,
    UsagesDtoToJSON,
    UsersCountsDtoFromJSON,
    UsersCountsDtoToJSON,
} from '../models/index';

export interface GetMessagesCountRequest {
    since?: Date;
    groupBy?: GetMessagesCountGroupByEnum;
}

export interface GetRatingsRequest {
    since?: Date;
    groupBy?: GetRatingsGroupByEnum;
}

export interface GetTokenUsageRequest {
    since?: Date;
    groupBy?: GetTokenUsageGroupByEnum;
}

export interface GetUsersCountRequest {
    since?: Date;
    groupBy?: GetUsersCountGroupByEnum;
}

/**
 * 
 */
export class UsagesApi extends runtime.BaseAPI {

    /**
     * Retrieve the total count of messages
     * 
     */
    async getMessagesCountRaw(requestParameters: GetMessagesCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagesCountsDto>> {
        const queryParameters: any = {};

        if (requestParameters['since'] != null) {
            queryParameters['since'] = (requestParameters['since'] as any).toISOString();
        }

        if (requestParameters['groupBy'] != null) {
            queryParameters['groupBy'] = requestParameters['groupBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/usages/messages-count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagesCountsDtoFromJSON(jsonValue));
    }

    /**
     * Retrieve the total count of messages
     * 
     */
    async getMessagesCount(since?: Date, groupBy?: GetMessagesCountGroupByEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagesCountsDto> {
        const response = await this.getMessagesCountRaw({ since: since, groupBy: groupBy }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the ratings over time.
     * 
     */
    async getRatingsRaw(requestParameters: GetRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingsDto>> {
        const queryParameters: any = {};

        if (requestParameters['since'] != null) {
            queryParameters['since'] = (requestParameters['since'] as any).toISOString();
        }

        if (requestParameters['groupBy'] != null) {
            queryParameters['groupBy'] = requestParameters['groupBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/usages/ratings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingsDtoFromJSON(jsonValue));
    }

    /**
     * Gets the ratings over time.
     * 
     */
    async getRatings(since?: Date, groupBy?: GetRatingsGroupByEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingsDto> {
        const response = await this.getRatingsRaw({ since: since, groupBy: groupBy }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the token usage.
     * 
     */
    async getTokenUsageRaw(requestParameters: GetTokenUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsagesDto>> {
        const queryParameters: any = {};

        if (requestParameters['since'] != null) {
            queryParameters['since'] = (requestParameters['since'] as any).toISOString();
        }

        if (requestParameters['groupBy'] != null) {
            queryParameters['groupBy'] = requestParameters['groupBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/usages/tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsagesDtoFromJSON(jsonValue));
    }

    /**
     * Gets the token usage.
     * 
     */
    async getTokenUsage(since?: Date, groupBy?: GetTokenUsageGroupByEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsagesDto> {
        const response = await this.getTokenUsageRaw({ since: since, groupBy: groupBy }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the total count of users per day, week or month
     * 
     */
    async getUsersCountRaw(requestParameters: GetUsersCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersCountsDto>> {
        const queryParameters: any = {};

        if (requestParameters['since'] != null) {
            queryParameters['since'] = (requestParameters['since'] as any).toISOString();
        }

        if (requestParameters['groupBy'] != null) {
            queryParameters['groupBy'] = requestParameters['groupBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/usages/users-count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersCountsDtoFromJSON(jsonValue));
    }

    /**
     * Retrieve the total count of users per day, week or month
     * 
     */
    async getUsersCount(since?: Date, groupBy?: GetUsersCountGroupByEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersCountsDto> {
        const response = await this.getUsersCountRaw({ since: since, groupBy: groupBy }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetMessagesCountGroupByEnum = {
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type GetMessagesCountGroupByEnum = typeof GetMessagesCountGroupByEnum[keyof typeof GetMessagesCountGroupByEnum];
/**
 * @export
 */
export const GetRatingsGroupByEnum = {
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type GetRatingsGroupByEnum = typeof GetRatingsGroupByEnum[keyof typeof GetRatingsGroupByEnum];
/**
 * @export
 */
export const GetTokenUsageGroupByEnum = {
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type GetTokenUsageGroupByEnum = typeof GetTokenUsageGroupByEnum[keyof typeof GetTokenUsageGroupByEnum];
/**
 * @export
 */
export const GetUsersCountGroupByEnum = {
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type GetUsersCountGroupByEnum = typeof GetUsersCountGroupByEnum[keyof typeof GetUsersCountGroupByEnum];
