//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SettingsDto,
} from '../models/index';
import {
    SettingsDtoFromJSON,
    SettingsDtoToJSON,
} from '../models/index';

export interface DeleteLogoRequest {
    imageType: string;
}

export interface GetImageRequest {
    imageType: string;
}

export interface PostImageRequest {
    imageType: string;
    file?: Blob;
}

export interface PostSettingsRequest {
    settingsDto: SettingsDto;
}

/**
 * 
 */
export class SettingsApi extends runtime.BaseAPI {

    /**
     * Deletes the logo.
     * 
     */
    async deleteLogoRaw(requestParameters: DeleteLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['imageType'] == null) {
            throw new runtime.RequiredError(
                'imageType',
                'Required parameter "imageType" was null or undefined when calling deleteLogo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/settings/{imageType}`.replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters['imageType']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the logo.
     * 
     */
    async deleteLogo(imageType: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLogoRaw({ imageType: imageType }, initOverrides);
    }

    /**
     * Gets the logo.
     * 
     */
    async getImageRaw(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['imageType'] == null) {
            throw new runtime.RequiredError(
                'imageType',
                'Required parameter "imageType" was null or undefined when calling getImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/settings/{imageType}`.replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters['imageType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Gets the logo.
     * 
     */
    async getImage(imageType: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getImageRaw({ imageType: imageType }, initOverrides);
        return await response.value();
    }

    /**
     * Gets settings.
     * 
     */
    async getSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SettingsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsDtoFromJSON(jsonValue));
    }

    /**
     * Gets settings.
     * 
     */
    async getSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SettingsDto> {
        const response = await this.getSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async postImageRaw(requestParameters: PostImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['imageType'] == null) {
            throw new runtime.RequiredError(
                'imageType',
                'Required parameter "imageType" was null or undefined when calling postImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/settings/{imageType}`.replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters['imageType']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async postImage(imageType: string, file?: Blob, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postImageRaw({ imageType: imageType, file: file }, initOverrides);
    }

    /**
     * Update settings.
     * 
     */
    async postSettingsRaw(requestParameters: PostSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SettingsDto>> {
        if (requestParameters['settingsDto'] == null) {
            throw new runtime.RequiredError(
                'settingsDto',
                'Required parameter "settingsDto" was null or undefined when calling postSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsDtoToJSON(requestParameters['settingsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsDtoFromJSON(jsonValue));
    }

    /**
     * Update settings.
     * 
     */
    async postSettings(settingsDto: SettingsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SettingsDto> {
        const response = await this.postSettingsRaw({ settingsDto: settingsDto }, initOverrides);
        return await response.value();
    }

}
