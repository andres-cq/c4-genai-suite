//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthSettingsDto,
  LoginDto,
  ProfileDto,
} from '../models/index';
import {
    AuthSettingsDtoFromJSON,
    AuthSettingsDtoToJSON,
    LoginDtoFromJSON,
    LoginDtoToJSON,
    ProfileDtoFromJSON,
    ProfileDtoToJSON,
} from '../models/index';

export interface LoginRequest {
    loginDto: LoginDto;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * The settings.
     * 
     */
    async getAuthSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSettingsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSettingsDtoFromJSON(jsonValue));
    }

    /**
     * The settings.
     * 
     */
    async getAuthSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSettingsDto> {
        const response = await this.getAuthSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Provides the profile.
     * 
     */
    async getProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileDtoFromJSON(jsonValue));
    }

    /**
     * Provides the profile.
     * 
     */
    async getProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileDto> {
        const response = await this.getProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login completed.
     * 
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['loginDto'] == null) {
            throw new runtime.RequiredError(
                'loginDto',
                'Required parameter "loginDto" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters['loginDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Login completed.
     * 
     */
    async login(loginDto: LoginDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.loginRaw({ loginDto: loginDto }, initOverrides);
    }

}
