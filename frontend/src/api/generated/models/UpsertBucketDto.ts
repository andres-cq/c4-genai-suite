//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BucketDtoFileSizeLimits } from './BucketDtoFileSizeLimits';
import {
    BucketDtoFileSizeLimitsFromJSON,
    BucketDtoFileSizeLimitsFromJSONTyped,
    BucketDtoFileSizeLimitsToJSON,
} from './BucketDtoFileSizeLimits';

/**
 * 
 * @export
 * @interface UpsertBucketDto
 */
export interface UpsertBucketDto {
    /**
     * The name of the bucket.
     * @type {string}
     * @memberof UpsertBucketDto
     */
    name: string;
    /**
     * The URL to the RAG server.
     * @type {string}
     * @memberof UpsertBucketDto
     */
    endpoint: string;
    /**
     * The optional index name.
     * @type {string}
     * @memberof UpsertBucketDto
     */
    indexName: string;
    /**
     * The optional headers.
     * @type {string}
     * @memberof UpsertBucketDto
     */
    headers: string;
    /**
     * Indicates whether the bucket is the user/default bucket.
     * @type {boolean}
     * @memberof UpsertBucketDto
     */
    isDefault: boolean;
    /**
     * The quota per user. Only relevant if the bucket is a user bucket/default bucket.
     * @type {number}
     * @memberof UpsertBucketDto
     */
    perUserQuota: number;
    /**
     * The allowed file types. Only relevant if the bucket is a user bucket/default bucket.
     * @type {Array<string>}
     * @memberof UpsertBucketDto
     */
    allowedFileNameExtensions?: Array<string>;
    /**
     * The bucket type.
     * @type {string}
     * @memberof UpsertBucketDto
     */
    type?: UpsertBucketDtoTypeEnum;
    /**
     * 
     * @type {BucketDtoFileSizeLimits}
     * @memberof UpsertBucketDto
     */
    fileSizeLimits: BucketDtoFileSizeLimits;
}


/**
 * @export
 */
export const UpsertBucketDtoTypeEnum = {
    General: 'general',
    User: 'user',
    Conversation: 'conversation'
} as const;
export type UpsertBucketDtoTypeEnum = typeof UpsertBucketDtoTypeEnum[keyof typeof UpsertBucketDtoTypeEnum];


/**
 * Check if a given object implements the UpsertBucketDto interface.
 */
export function instanceOfUpsertBucketDto(value: object): value is UpsertBucketDto {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('endpoint' in value) || value['endpoint'] === undefined) return false;
    if (!('indexName' in value) || value['indexName'] === undefined) return false;
    if (!('headers' in value) || value['headers'] === undefined) return false;
    if (!('isDefault' in value) || value['isDefault'] === undefined) return false;
    if (!('perUserQuota' in value) || value['perUserQuota'] === undefined) return false;
    if (!('fileSizeLimits' in value) || value['fileSizeLimits'] === undefined) return false;
    return true;
}

export function UpsertBucketDtoFromJSON(json: any): UpsertBucketDto {
    return UpsertBucketDtoFromJSONTyped(json, false);
}

export function UpsertBucketDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpsertBucketDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'endpoint': json['endpoint'],
        'indexName': json['indexName'],
        'headers': json['headers'],
        'isDefault': json['isDefault'],
        'perUserQuota': json['perUserQuota'],
        'allowedFileNameExtensions': json['allowedFileNameExtensions'] == null ? undefined : json['allowedFileNameExtensions'],
        'type': json['type'] == null ? undefined : json['type'],
        'fileSizeLimits': BucketDtoFileSizeLimitsFromJSON(json['fileSizeLimits']),
    };
}

export function UpsertBucketDtoToJSON(value?: UpsertBucketDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'endpoint': value['endpoint'],
        'indexName': value['indexName'],
        'headers': value['headers'],
        'isDefault': value['isDefault'],
        'perUserQuota': value['perUserQuota'],
        'allowedFileNameExtensions': value['allowedFileNameExtensions'],
        'type': value['type'],
        'fileSizeLimits': BucketDtoFileSizeLimitsToJSON(value['fileSizeLimits']),
    };
}

