//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StreamMessageSavedDto
 */
export interface StreamMessageSavedDto {
    /**
     * The message ID.
     * @type {number}
     * @memberof StreamMessageSavedDto
     */
    messageId: number;
    /**
     * The type.
     * @type {string}
     * @memberof StreamMessageSavedDto
     */
    messageType: StreamMessageSavedDtoMessageTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StreamMessageSavedDto
     */
    type: StreamMessageSavedDtoTypeEnum;
}


/**
 * @export
 */
export const StreamMessageSavedDtoMessageTypeEnum = {
    Ai: 'ai',
    Human: 'human'
} as const;
export type StreamMessageSavedDtoMessageTypeEnum = typeof StreamMessageSavedDtoMessageTypeEnum[keyof typeof StreamMessageSavedDtoMessageTypeEnum];

/**
 * @export
 */
export const StreamMessageSavedDtoTypeEnum = {
    Saved: 'saved'
} as const;
export type StreamMessageSavedDtoTypeEnum = typeof StreamMessageSavedDtoTypeEnum[keyof typeof StreamMessageSavedDtoTypeEnum];


/**
 * Check if a given object implements the StreamMessageSavedDto interface.
 */
export function instanceOfStreamMessageSavedDto(value: object): value is StreamMessageSavedDto {
    if (!('messageId' in value) || value['messageId'] === undefined) return false;
    if (!('messageType' in value) || value['messageType'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function StreamMessageSavedDtoFromJSON(json: any): StreamMessageSavedDto {
    return StreamMessageSavedDtoFromJSONTyped(json, false);
}

export function StreamMessageSavedDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamMessageSavedDto {
    if (json == null) {
        return json;
    }
    return {
        
        'messageId': json['messageId'],
        'messageType': json['messageType'],
        'type': json['type'],
    };
}

export function StreamMessageSavedDtoToJSON(value?: StreamMessageSavedDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'messageId': value['messageId'],
        'messageType': value['messageType'],
        'type': value['type'],
    };
}

