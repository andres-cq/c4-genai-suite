//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SourceDto } from './SourceDto';
import {
    SourceDtoFromJSON,
    SourceDtoFromJSONTyped,
    SourceDtoToJSON,
} from './SourceDto';

/**
 * 
 * @export
 * @interface StreamSourcesEvent
 */
export interface StreamSourcesEvent {
    /**
     * The sources information.
     * @type {Array<SourceDto>}
     * @memberof StreamSourcesEvent
     */
    content: Array<SourceDto>;
    /**
     * 
     * @type {string}
     * @memberof StreamSourcesEvent
     */
    type: StreamSourcesEventTypeEnum;
}


/**
 * @export
 */
export const StreamSourcesEventTypeEnum = {
    Sources: 'sources'
} as const;
export type StreamSourcesEventTypeEnum = typeof StreamSourcesEventTypeEnum[keyof typeof StreamSourcesEventTypeEnum];


/**
 * Check if a given object implements the StreamSourcesEvent interface.
 */
export function instanceOfStreamSourcesEvent(value: object): value is StreamSourcesEvent {
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function StreamSourcesEventFromJSON(json: any): StreamSourcesEvent {
    return StreamSourcesEventFromJSONTyped(json, false);
}

export function StreamSourcesEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamSourcesEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'content': ((json['content'] as Array<any>).map(SourceDtoFromJSON)),
        'type': json['type'],
    };
}

export function StreamSourcesEventToJSON(value?: StreamSourcesEvent | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'content': ((value['content'] as Array<any>).map(SourceDtoToJSON)),
        'type': value['type'],
    };
}

