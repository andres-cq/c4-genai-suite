//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExtensionDto } from './ExtensionDto';
import {
    ExtensionDtoFromJSON,
    ExtensionDtoFromJSONTyped,
    ExtensionDtoToJSON,
} from './ExtensionDto';
import type { ExtensionSpecDto } from './ExtensionSpecDto';
import {
    ExtensionSpecDtoFromJSON,
    ExtensionSpecDtoFromJSONTyped,
    ExtensionSpecDtoToJSON,
} from './ExtensionSpecDto';

/**
 * 
 * @export
 * @interface ExtensionsDto
 */
export interface ExtensionsDto {
    /**
     * The configured extensions.
     * @type {Array<ExtensionDto>}
     * @memberof ExtensionsDto
     */
    configured: Array<ExtensionDto>;
    /**
     * The extension specs.
     * @type {Array<ExtensionSpecDto>}
     * @memberof ExtensionsDto
     */
    specs: Array<ExtensionSpecDto>;
}

/**
 * Check if a given object implements the ExtensionsDto interface.
 */
export function instanceOfExtensionsDto(value: object): value is ExtensionsDto {
    if (!('configured' in value) || value['configured'] === undefined) return false;
    if (!('specs' in value) || value['specs'] === undefined) return false;
    return true;
}

export function ExtensionsDtoFromJSON(json: any): ExtensionsDto {
    return ExtensionsDtoFromJSONTyped(json, false);
}

export function ExtensionsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionsDto {
    if (json == null) {
        return json;
    }
    return {
        
        'configured': ((json['configured'] as Array<any>).map(ExtensionDtoFromJSON)),
        'specs': ((json['specs'] as Array<any>).map(ExtensionSpecDtoFromJSON)),
    };
}

export function ExtensionsDtoToJSON(value?: ExtensionsDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'configured': ((value['configured'] as Array<any>).map(ExtensionDtoToJSON)),
        'specs': ((value['specs'] as Array<any>).map(ExtensionSpecDtoToJSON)),
    };
}

