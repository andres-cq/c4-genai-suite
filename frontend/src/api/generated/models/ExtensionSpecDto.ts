//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExtensionArgumentObjectSpecDtoPropertiesValue } from './ExtensionArgumentObjectSpecDtoPropertiesValue';
import {
    ExtensionArgumentObjectSpecDtoPropertiesValueFromJSON,
    ExtensionArgumentObjectSpecDtoPropertiesValueFromJSONTyped,
    ExtensionArgumentObjectSpecDtoPropertiesValueToJSON,
} from './ExtensionArgumentObjectSpecDtoPropertiesValue';

/**
 * 
 * @export
 * @interface ExtensionSpecDto
 */
export interface ExtensionSpecDto {
    /**
     * The name of the extension.
     * @type {string}
     * @memberof ExtensionSpecDto
     */
    name: string;
    /**
     * The group of pairwise incompatible tools.
     * @type {string}
     * @memberof ExtensionSpecDto
     */
    group?: string;
    /**
     * Whitelist of compatible tools within the group.
     * @type {Array<string>}
     * @memberof ExtensionSpecDto
     */
    groupWhitelist?: Array<string>;
    /**
     * The display title.
     * @type {string}
     * @memberof ExtensionSpecDto
     */
    title: string;
    /**
     * The optional description.
     * @type {string}
     * @memberof ExtensionSpecDto
     */
    description?: string;
    /**
     * The optional logo as SVG.
     * @type {string}
     * @memberof ExtensionSpecDto
     */
    logo?: string;
    /**
     * Indicates if the extension can be tested.
     * @type {boolean}
     * @memberof ExtensionSpecDto
     */
    testable: boolean;
    /**
     * When spec is dynamic, triggers is used to rebuild the spec.
     * @type {Array<string>}
     * @memberof ExtensionSpecDto
     */
    triggers?: Array<string>;
    /**
     * The type of the extension.
     * @type {string}
     * @memberof ExtensionSpecDto
     */
    type: ExtensionSpecDtoTypeEnum;
    /**
     * The arguments.
     * @type {{ [key: string]: ExtensionArgumentObjectSpecDtoPropertiesValue; }}
     * @memberof ExtensionSpecDto
     */
    arguments: { [key: string]: ExtensionArgumentObjectSpecDtoPropertiesValue; };
}


/**
 * @export
 */
export const ExtensionSpecDtoTypeEnum = {
    Tool: 'tool',
    Llm: 'llm',
    Other: 'other'
} as const;
export type ExtensionSpecDtoTypeEnum = typeof ExtensionSpecDtoTypeEnum[keyof typeof ExtensionSpecDtoTypeEnum];


/**
 * Check if a given object implements the ExtensionSpecDto interface.
 */
export function instanceOfExtensionSpecDto(value: object): value is ExtensionSpecDto {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('testable' in value) || value['testable'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('arguments' in value) || value['arguments'] === undefined) return false;
    return true;
}

export function ExtensionSpecDtoFromJSON(json: any): ExtensionSpecDto {
    return ExtensionSpecDtoFromJSONTyped(json, false);
}

export function ExtensionSpecDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionSpecDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'group': json['group'] == null ? undefined : json['group'],
        'groupWhitelist': json['groupWhitelist'] == null ? undefined : json['groupWhitelist'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'logo': json['logo'] == null ? undefined : json['logo'],
        'testable': json['testable'],
        'triggers': json['triggers'] == null ? undefined : json['triggers'],
        'type': json['type'],
        'arguments': (mapValues(json['arguments'], ExtensionArgumentObjectSpecDtoPropertiesValueFromJSON)),
    };
}

export function ExtensionSpecDtoToJSON(value?: ExtensionSpecDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'group': value['group'],
        'groupWhitelist': value['groupWhitelist'],
        'title': value['title'],
        'description': value['description'],
        'logo': value['logo'],
        'testable': value['testable'],
        'triggers': value['triggers'],
        'type': value['type'],
        'arguments': (mapValues(value['arguments'], ExtensionArgumentObjectSpecDtoPropertiesValueToJSON)),
    };
}

