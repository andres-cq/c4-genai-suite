//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChatSuggestionDto } from './ChatSuggestionDto';
import {
    ChatSuggestionDtoFromJSON,
    ChatSuggestionDtoFromJSONTyped,
    ChatSuggestionDtoToJSON,
} from './ChatSuggestionDto';
import type { SiteLinkDto } from './SiteLinkDto';
import {
    SiteLinkDtoFromJSON,
    SiteLinkDtoFromJSONTyped,
    SiteLinkDtoToJSON,
} from './SiteLinkDto';

/**
 * 
 * @export
 * @interface SettingsDto
 */
export interface SettingsDto {
    /**
     * The language of the app.
     * @type {string}
     * @memberof SettingsDto
     */
    language?: string;
    /**
     * The name of the app.
     * @type {string}
     * @memberof SettingsDto
     */
    name?: string;
    /**
     * The primary color used for buttons and links.
     * @type {string}
     * @memberof SettingsDto
     */
    primaryColor?: string;
    /**
     * The primary content color used for buttons and links.
     * @type {string}
     * @memberof SettingsDto
     */
    primaryContentColor?: string;
    /**
     * The welcome text.
     * @type {string}
     * @memberof SettingsDto
     */
    welcomeText?: string;
    /**
     * The name of the agent.
     * @type {string}
     * @memberof SettingsDto
     */
    agentName?: string;
    /**
     * The footer text to be shown below the chat.
     * @type {string}
     * @memberof SettingsDto
     */
    chatFooter?: string;
    /**
     * The suggestions to be shown for the chat.
     * @type {Array<ChatSuggestionDto>}
     * @memberof SettingsDto
     */
    chatSuggestions?: Array<ChatSuggestionDto>;
    /**
     * The site links to be shown on login screen
     * @type {Array<SiteLinkDto>}
     * @memberof SettingsDto
     */
    siteLinks?: Array<SiteLinkDto>;
    /**
     * Some custom css.
     * @type {string}
     * @memberof SettingsDto
     */
    customCss?: string;
    /**
     * The key of the logo.
     * @type {string}
     * @memberof SettingsDto
     */
    logo?: string;
    /**
     * The key of the backgroundLogo.
     * @type {string}
     * @memberof SettingsDto
     */
    backgroundLogo?: string;
    /**
     * The key of the avatar logo.
     * @type {string}
     * @memberof SettingsDto
     */
    avatarLogo?: string;
}

/**
 * Check if a given object implements the SettingsDto interface.
 */
export function instanceOfSettingsDto(value: object): value is SettingsDto {
    return true;
}

export function SettingsDtoFromJSON(json: any): SettingsDto {
    return SettingsDtoFromJSONTyped(json, false);
}

export function SettingsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SettingsDto {
    if (json == null) {
        return json;
    }
    return {
        
        'language': json['language'] == null ? undefined : json['language'],
        'name': json['name'] == null ? undefined : json['name'],
        'primaryColor': json['primaryColor'] == null ? undefined : json['primaryColor'],
        'primaryContentColor': json['primaryContentColor'] == null ? undefined : json['primaryContentColor'],
        'welcomeText': json['welcomeText'] == null ? undefined : json['welcomeText'],
        'agentName': json['agentName'] == null ? undefined : json['agentName'],
        'chatFooter': json['chatFooter'] == null ? undefined : json['chatFooter'],
        'chatSuggestions': json['chatSuggestions'] == null ? undefined : ((json['chatSuggestions'] as Array<any>).map(ChatSuggestionDtoFromJSON)),
        'siteLinks': json['siteLinks'] == null ? undefined : ((json['siteLinks'] as Array<any>).map(SiteLinkDtoFromJSON)),
        'customCss': json['customCss'] == null ? undefined : json['customCss'],
        'logo': json['logo'] == null ? undefined : json['logo'],
        'backgroundLogo': json['backgroundLogo'] == null ? undefined : json['backgroundLogo'],
        'avatarLogo': json['avatarLogo'] == null ? undefined : json['avatarLogo'],
    };
}

export function SettingsDtoToJSON(value?: SettingsDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'language': value['language'],
        'name': value['name'],
        'primaryColor': value['primaryColor'],
        'primaryContentColor': value['primaryContentColor'],
        'welcomeText': value['welcomeText'],
        'agentName': value['agentName'],
        'chatFooter': value['chatFooter'],
        'chatSuggestions': value['chatSuggestions'] == null ? undefined : ((value['chatSuggestions'] as Array<any>).map(ChatSuggestionDtoToJSON)),
        'siteLinks': value['siteLinks'] == null ? undefined : ((value['siteLinks'] as Array<any>).map(SiteLinkDtoToJSON)),
        'customCss': value['customCss'],
        'logo': value['logo'],
        'backgroundLogo': value['backgroundLogo'],
        'avatarLogo': value['avatarLogo'],
    };
}

