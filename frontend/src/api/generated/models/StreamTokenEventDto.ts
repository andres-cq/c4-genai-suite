//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageContentDto } from './MessageContentDto';
import {
    MessageContentDtoFromJSON,
    MessageContentDtoFromJSONTyped,
    MessageContentDtoToJSON,
} from './MessageContentDto';

/**
 * 
 * @export
 * @interface StreamTokenEventDto
 */
export interface StreamTokenEventDto {
    /**
     * The content.
     * @type {Array<MessageContentDto>}
     * @memberof StreamTokenEventDto
     */
    content: Array<MessageContentDto>;
    /**
     * 
     * @type {string}
     * @memberof StreamTokenEventDto
     */
    type: StreamTokenEventDtoTypeEnum;
}


/**
 * @export
 */
export const StreamTokenEventDtoTypeEnum = {
    Chunk: 'chunk'
} as const;
export type StreamTokenEventDtoTypeEnum = typeof StreamTokenEventDtoTypeEnum[keyof typeof StreamTokenEventDtoTypeEnum];


/**
 * Check if a given object implements the StreamTokenEventDto interface.
 */
export function instanceOfStreamTokenEventDto(value: object): value is StreamTokenEventDto {
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function StreamTokenEventDtoFromJSON(json: any): StreamTokenEventDto {
    return StreamTokenEventDtoFromJSONTyped(json, false);
}

export function StreamTokenEventDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamTokenEventDto {
    if (json == null) {
        return json;
    }
    return {
        
        'content': ((json['content'] as Array<any>).map(MessageContentDtoFromJSON)),
        'type': json['type'],
    };
}

export function StreamTokenEventDtoToJSON(value?: StreamTokenEventDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'content': ((value['content'] as Array<any>).map(MessageContentDtoToJSON)),
        'type': value['type'],
    };
}

