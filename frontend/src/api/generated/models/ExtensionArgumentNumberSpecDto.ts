//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExtensionArgumentNumberSpecDto
 */
export interface ExtensionArgumentNumberSpecDto {
    /**
     * The type of the argument.
     * @type {string}
     * @memberof ExtensionArgumentNumberSpecDto
     */
    type: ExtensionArgumentNumberSpecDtoTypeEnum;
    /**
     * The label of the argument.
     * @type {string}
     * @memberof ExtensionArgumentNumberSpecDto
     */
    title: string;
    /**
     * True, if required.
     * @type {string}
     * @memberof ExtensionArgumentNumberSpecDto
     */
    description?: string;
    /**
     * True, if required.
     * @type {boolean}
     * @memberof ExtensionArgumentNumberSpecDto
     */
    required?: boolean;
    /**
     * True to show this property in lists.
     * @type {boolean}
     * @memberof ExtensionArgumentNumberSpecDto
     */
    showInList?: boolean;
    /**
     * URL to the documentation.
     * @type {string}
     * @memberof ExtensionArgumentNumberSpecDto
     */
    documentationUrl?: string;
    /**
     * The editor.
     * @type {string}
     * @memberof ExtensionArgumentNumberSpecDto
     */
    format?: ExtensionArgumentNumberSpecDtoFormatEnum;
    /**
     * The minimum allowed value for numbers.
     * @type {number}
     * @memberof ExtensionArgumentNumberSpecDto
     */
    minimum?: number;
    /**
     * The maximum allowed value for numbers.
     * @type {number}
     * @memberof ExtensionArgumentNumberSpecDto
     */
    maximum?: number;
    /**
     * The multipleOf value for numbers.
     * @type {number}
     * @memberof ExtensionArgumentNumberSpecDto
     */
    multipleOf?: number;
    /**
     * The selected value.
     * @type {number}
     * @memberof ExtensionArgumentNumberSpecDto
     */
    _default?: number;
}


/**
 * @export
 */
export const ExtensionArgumentNumberSpecDtoTypeEnum = {
    String: 'string',
    Number: 'number',
    Boolean: 'boolean',
    Object: 'object',
    Array: 'array'
} as const;
export type ExtensionArgumentNumberSpecDtoTypeEnum = typeof ExtensionArgumentNumberSpecDtoTypeEnum[keyof typeof ExtensionArgumentNumberSpecDtoTypeEnum];

/**
 * @export
 */
export const ExtensionArgumentNumberSpecDtoFormatEnum = {
    Input: 'input',
    Slider: 'slider',
    Bucket: 'bucket'
} as const;
export type ExtensionArgumentNumberSpecDtoFormatEnum = typeof ExtensionArgumentNumberSpecDtoFormatEnum[keyof typeof ExtensionArgumentNumberSpecDtoFormatEnum];


/**
 * Check if a given object implements the ExtensionArgumentNumberSpecDto interface.
 */
export function instanceOfExtensionArgumentNumberSpecDto(value: object): value is ExtensionArgumentNumberSpecDto {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    return true;
}

export function ExtensionArgumentNumberSpecDtoFromJSON(json: any): ExtensionArgumentNumberSpecDto {
    return ExtensionArgumentNumberSpecDtoFromJSONTyped(json, false);
}

export function ExtensionArgumentNumberSpecDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionArgumentNumberSpecDto {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'required': json['required'] == null ? undefined : json['required'],
        'showInList': json['showInList'] == null ? undefined : json['showInList'],
        'documentationUrl': json['documentationUrl'] == null ? undefined : json['documentationUrl'],
        'format': json['format'] == null ? undefined : json['format'],
        'minimum': json['minimum'] == null ? undefined : json['minimum'],
        'maximum': json['maximum'] == null ? undefined : json['maximum'],
        'multipleOf': json['multipleOf'] == null ? undefined : json['multipleOf'],
        '_default': json['default'] == null ? undefined : json['default'],
    };
}

export function ExtensionArgumentNumberSpecDtoToJSON(value?: ExtensionArgumentNumberSpecDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'type': value['type'],
        'title': value['title'],
        'description': value['description'],
        'required': value['required'],
        'showInList': value['showInList'],
        'documentationUrl': value['documentationUrl'],
        'format': value['format'],
        'minimum': value['minimum'],
        'maximum': value['maximum'],
        'multipleOf': value['multipleOf'],
        'default': value['_default'],
    };
}

